% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ggnetwork_plot.R
\name{ggnetwork_plot}
\alias{ggnetwork_plot}
\title{Generate network plot}
\usage{
ggnetwork_plot(
  phenoNet,
  colour_var = "fold_change",
  colour_label = gsub("_", " ", colour_var),
  size_var = "ontLvl",
  interactive = TRUE,
  tooltip = "hover",
  verbose = TRUE,
  ...
)
}
\arguments{
\item{phenoNet}{The network object created using create_network_object}

\item{colour_var}{Column  to be mapped to node colour.}

\item{colour_label}{A label for the colour figure legend \<string\>.}

\item{size_var}{Column name to be mapped  to node size.}

\item{interactive}{Make the plot interactive with \link[plotly]{ggplotly}.}

\item{tooltip}{a character vector specifying which aesthetic mappings to show
in the tooltip. The default, "all", means show all the aesthetic mappings
(including the unofficial "text" aesthetic). The order of variables here will
also control the order they appear. For example, use
\code{tooltip = c("y", "x", "colour")} if you want y first, x second, and
colour last.}

\item{verbose}{Print messages.}

\item{...}{
  Arguments passed on to \code{\link[plotly:ggplotly]{plotly::ggplotly}}
  \describe{
    \item{\code{p}}{a ggplot object.}
    \item{\code{width}}{Width of the plot in pixels (optional, defaults to automatic sizing).}
    \item{\code{height}}{Height of the plot in pixels (optional, defaults to automatic sizing).}
    \item{\code{dynamicTicks}}{should plotly.js dynamically generate axis tick labels?
Dynamic ticks are useful for updating ticks in response to zoom/pan
interactions; however, they can not always reproduce labels as they
would appear in the static ggplot2 image.}
    \item{\code{layerData}}{data from which layer should be returned?}
    \item{\code{originalData}}{should the "original" or "scaled" data be returned?}
    \item{\code{source}}{a character string of length 1. Match the value of this string
with the source argument in \code{\link[plotly:event_data]{event_data()}} to retrieve the
event data corresponding to a specific plot (shiny apps can have multiple plots).}
  }}
}
\value{
A network plot (compatible with interactive plotly rendering).
}
\description{
This creates a network plot which is compatible with plotly
to make interactive plots.
It makes it possible to hover box that includes your results related to
each phenotype and/or a description of the phenotypes.
}
\examples{
phenos <- make_phenos_dataframe(ancestor = "Neurodevelopmental delay")
phenoNet <- make_network_object(phenos = phenos,
                                colour_var = "ontLvl_geneCount_ratio")
plt <- ggnetwork_plot(phenoNet = phenoNet,
                      colour_var = "ontLvl_geneCount_ratio",
                      colour_label = "ontLvl_genes")
}
